# All assembly defintions taken from: http://www.shared-ptr.com/sh_insns.html

define endian=big;

define alignment=2;

define space ram type=ram_space size=4 wordsize=1 default;
define space register type=register_space size=4;

define register offset=0 size=4
[r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15];

define register offset=0x100 size=4 [sr gbr vbr mach macl pr pc];

#define bitrange T=sr[0,1]
#                S=sr[1,1];
#                I0=sr[4,1];
#                I1=sr[5,1];
#                I2=sr[6,1];
#                I3=sr[7,1];
#                Q=sr[8,1];
#                M=sr[9,1];

define token instr(16)
    disp_00_03 = (0, 3) signed
    disp_00_07 = (0, 7) signed
    disp_00_11 = (0, 11) signed
    imm_00_07 = (0, 7)
    opcode_00_03 = (0, 3)
    opcode_00_07 = (0, 7)
    opcode_00_15 = (0, 15)
    opcode_08_15 = (8, 15)
    opcode_12_15 = (12, 15)
    rm_04_07 = (4, 7)
    rm_08_11 = (8, 11)
    rn_04_07 = (4, 7)
    rn_08_11 = (8, 11)
;

attach variables [ rm_04_07 rm_08_11 rn_04_07 rn_08_11 ] [
    r0  r1  r2  r3  r4  r5  r6  r7
    r8  r9 r10 r11 r12  r13 r14 r15
];

# helpers for branch instructions
target00_07: target is disp_00_07 [ target = (disp_00_07 << 1) + inst_start + 4; ] {
    export *:4 target;
}

target00_11: target is disp_00_11 [ target = (disp_00_11 << 1) + inst_start + 4; ] {
    export *:4 target;
}

targetm08_11: target is rm_08_11 [ target = rm_08_11 + inst_start + 4; ] {
    export *:4 target;
}

#
# SH2 only instructions -> move to seperate file
#
:dmuls.l    rm_04_07,rn_08_11  is opcode_12_15=0b0011 & rn_08_11 & rm_04_07 & opcode_00_03=0b1101 
{
    local a:8 = sext(rn_08_11);
    local b:8 = sext(rm_04_07);
    local result:8 = a * b;

    mach = result(4);
    macl = result:4;
}

:dmulu.l    rm_04_07,rn_08_11  is opcode_12_15=0b0011 & rn_08_11 & rm_04_07 & opcode_00_03=0b0101 
{
    local a:8 = zext(rn_08_11);
    local b:8 = zext(rm_04_07);
    local result:8 = a * b;

    mach = result(4);
    macl = result:4;
}

:dt rn_08_11  is opcode_12_15=0b0100 & rn_08_11 & opcode_00_07=0b00010000 
{
    rn_08_11 = rn_08_11 -1;
    
    if( rn_08_11 != 0) goto <SKIP_FLAG>;
    sr = sr | 1;
    
    <SKIP_FLAG>
}

:mac.l  @rm_04_07+,@rn_08_11+  is opcode_12_15=0b0000 & rn_08_11 & rm_04_07 & opcode_00_03=0b1111 
{
    # BUGBUG: review this instruction
    local a:8 = sext(*:4 rn_08_11);
    local b:8 = sext(*:4 rm_04_07);
    local result:8 = a * b;
    
    local S:1 = ((sr & 0x2) != 0);
    
    rn_08_11 = rn_08_11 + 4;
    rm_04_07 = rm_04_07 + 4;
    
    if(S) goto <S_1>;
    
    goto <S_0>;
    
    <S_1>
    
    mach = (result(4) & 0x0000FFFF) | mach & (0xFFFF0000);
    macl = result:4;
    goto <END>;
    
    <S_0>

    result = result + zext(mach);
    
    mach = result(4);
    macl = result:4;
    
    <END>
}

:mul.l  rm_04_07,rn_08_11  is opcode_12_15=0b0000 & rn_08_11 & rm_04_07 & opcode_00_03=0b0111 
{
    macl = rn_08_11 * rm_04_07;
}

:bf"/s" target00_07  is opcode_08_15=0b10001111 & target00_07  
{
    t = (sr & 1);
    delayslot(1);
    if (t==0) goto target00_07;
}

:bt"/s" target00_07  is opcode_08_15=0b10001101 & target00_07
{
    t = (sr & 1);
    delayslot(1);
    if (t==1) goto target00_07;
}

:braf   targetm08_11  is opcode_12_15=0b0000 & targetm08_11 & opcode_00_07=0b00100011 
{
    delayslot(1);
    goto targetm08_11;
}

:bsrf   targetm08_11  is opcode_12_15=0b0000 & targetm08_11 & opcode_00_07=0b00000011 
{
    pr = inst_start + 4;
    delayslot(1);
    goto targetm08_11;
}

#
# Data Transfer Instructions
#
:mov rm_04_07, rn_08_11 is opcode_12_15=0b0110 & rn_08_11 & rm_04_07 & opcode_00_03=0b0011 
{
    rm_04_07 = rn_08_11;
}
    
:mov imm_00_07,rn_08_11 is opcode_12_15=0b1110 & rn_08_11 & imm_00_07  
{
    rn_08_11 = imm_00_07;
}

:mova   @(disp_00_07,"PC"),"R0"  is opcode_08_15=0b11000111 & disp_00_07  
{
    r0 = (disp_00_07*2) + (pc & 0xFFFFFFFC) + 4;
}

:mov.w  @(disp_00_07,"PC"),rn_08_11  is opcode_12_15=0b1001 & rn_08_11 & disp_00_07  
{
    rn_08_11 =  sext(*:2 (pc + 4 + (disp_00_07 << 1)));
}

:mov.l  @(disp_00_07,"PC"),rn_08_11  is opcode_12_15=0b1101 & rn_08_11 & disp_00_07
{
    # BUGBUG sign extension    
    rn_08_11 =  sext(*:4 ((pc & 0xFFFFFFFC) + 4 + (disp_00_07 << 2)));
}

:mov.b  @rm_04_07,rn_08_11  is opcode_12_15=0b0110 & rn_08_11 & rm_04_07 & opcode_00_03=0b0000 
{
    rn_08_11 =  sext(*:1 rm_04_07);
}

:mov.w  @rm_04_07,rn_08_11  is opcode_12_15=0b0110 & rn_08_11 & rm_04_07 & opcode_00_03=0b0001 
{
    rn_08_11 =  sext(*:2 rm_04_07);
}

:mov.l  @rm_04_07,rn_08_11  is opcode_12_15=0b0110 & rn_08_11 & rm_04_07 & opcode_00_03=0b0010 
{
    rn_08_11 =  *:4 rm_04_07;
}

:mov.b  rm_04_07,@rn_08_11  is opcode_12_15=0b0010 & rn_08_11 & rm_04_07 & opcode_00_03=0b0000 
{
    *:1 rn_08_11 = rm_04_07;
}

:mov.w  rm_04_07,@rn_08_11  is opcode_12_15=0b0010 & rn_08_11 & rm_04_07 & opcode_00_03=0b0001 
{
    *:2 rn_08_11 = rm_04_07;
}

:mov.l  rm_04_07,@rn_08_11  is opcode_12_15=0b0010 & rn_08_11 & rm_04_07 & opcode_00_03=0b0010 
{
    *:4 rn_08_11 = rm_04_07;
}

:mov.b  @rm_04_07+,rn_08_11  is opcode_12_15=0b0110 & rn_08_11 & rm_04_07 & opcode_00_03=0b0100 
{
    rn_08_11 =  sext(*:1 rm_04_07);
    
    # BUGBUG: check rn != rm
    rm_04_07 = rm_04_07 + 1;
}

:mov.w  @rm_04_07+,rn_08_11  is opcode_12_15=0b0110 & rn_08_11 & rm_04_07 & opcode_00_03=0b0101 
{
    rn_08_11 =  sext(*:2 rm_04_07);
    
    # BUGBUG: check rn != rm
    rm_04_07 = rm_04_07 + 1;
}

:mov.l  @rm_04_07+,rn_08_11  is opcode_12_15=0b0110 & rn_08_11 & rm_04_07 & opcode_00_03=0b0110 
{
    rn_08_11 =  sext(*:4 rm_04_07);
    
    # BUGBUG: check rn != rm
    rm_04_07 = rm_04_07 + 1;
}

:mov.b  rm_04_07,@-rn_08_11  is opcode_12_15=0b0010 & rn_08_11 & rm_04_07 & opcode_00_03=0b0100 
{
    rn_08_11 = rn_08_11 -1;
    *:1 rn_08_11 = rm_04_07;
}

:mov.w  rm_04_07,@-rn_08_11  is opcode_12_15=0b0010 & rn_08_11 & rm_04_07 & opcode_00_03=0b0101 
{
    rn_08_11 = rn_08_11 -2;
    *:2 rn_08_11 = rm_04_07;
}

:mov.l  rm_04_07,@-rn_08_11  is opcode_12_15=0b0010 & rn_08_11 & rm_04_07 & opcode_00_03=0b0110 
{
    rn_08_11 = rn_08_11 -4;
    *:4 rn_08_11 = rm_04_07;
}

:mov.b  @(disp_00_03,rm_04_07),"R0"  is opcode_08_15=0b10000100 & rm_04_07 & disp_00_03  
{
    r0 = sext(*:1 (disp_00_03 + rm_04_07));
}

:mov.w  @(disp_00_03,rm_04_07),"R0"  is opcode_08_15=0b10000101 & rm_04_07 & disp_00_03  
{
    r0 = sext(*:2 (disp_00_03 + rm_04_07));
}

:mov.l  @(disp_00_03,rm_04_07),rn_08_11  is opcode_12_15=0b0101 & rn_08_11 & rm_04_07 & disp_00_03  
{
    rn_08_11 = sext(*:4 ((disp_00_03 << 2) + rn_08_11));
}

:mov.b  "R0",@(disp_00_03,rn_04_07)  is opcode_08_15=0b10000000 & rn_04_07 & disp_00_03  
{
    *:1 (rn_04_07 + disp_00_03) = r0;
}

:mov.w  "R0",@(disp_00_03,rn_04_07)  is opcode_08_15=0b10000001 & rn_04_07 & disp_00_03  
{
    *:2 (rn_04_07 + (disp_00_03 << 1)) = r0;
}

:mov.l  rm_04_07,@(disp_00_03,rn_08_11)  is opcode_12_15=0b0001 & rn_08_11 & rm_04_07 & disp_00_03  
{
    *:4 (rn_08_11 + (disp_00_03 << 1)) = rm_04_07;
}

:mov.b  @("R0",rm_04_07),rn_08_11  is opcode_12_15=0b0000 & rn_08_11 & rm_04_07 & opcode_00_03=0b1100 
{
    rn_08_11 = sext(*:1 (rm_04_07 + r0));
}

:mov.w  @("R0",rm_04_07),rn_08_11  is opcode_12_15=0b0000 & rn_08_11 & rm_04_07 & opcode_00_03=0b1101 
{
    rn_08_11 = sext(*:2 (rm_04_07 + r0));
}

:mov.l  @("R0",rm_04_07),rn_08_11  is opcode_12_15=0b0000 & rn_08_11 & rm_04_07 & opcode_00_03=0b1110 
{
    rn_08_11 = sext(*:4 (rm_04_07 + r0));
}

:mov.b  rm_04_07,@("R0",rn_08_11)  is opcode_12_15=0b0000 & rn_08_11 & rm_04_07 & opcode_00_03=0b0100 
{
    *:1 (rn_08_11 + r0) = rm_04_07;
}

:mov.w  rm_04_07,@("R0",rn_08_11)  is opcode_12_15=0b0000 & rn_08_11 & rm_04_07 & opcode_00_03=0b0101 
{
    *:2 (rn_08_11 + r0) = rm_04_07;
}

:mov.l  rm_04_07,@("R0",rn_08_11)  is opcode_12_15=0b0000 & rn_08_11 & rm_04_07 & opcode_00_03=0b0110 
{
    *:4 (rn_08_11 + r0) = rm_04_07;
}

:mov.b  @(disp_00_07,"GBR"),"R0"  is opcode_08_15=0b11000100 & disp_00_07  
{
    r0 = sext(*:1 (gbr + disp_00_07));
}

:mov.w  @(disp_00_07,"GBR"),"R0"  is opcode_08_15=0b11000101 & disp_00_07  
{
    r0 = sext(*:2 (gbr + disp_00_07));
}

:mov.l  @(disp_00_07,"GBR"),"R0"  is opcode_08_15=0b11000110 & disp_00_07  
{
    r0 = sext(*:4 (gbr + disp_00_07));
}

:mov.b  "R0",@(disp_00_07,"GBR")  is opcode_08_15=0b11000000 & disp_00_07  
{
    *:1 (gbr + disp_00_07) = r0;
}

:mov.w  "R0",@(disp_00_07,"GBR")  is opcode_08_15=0b11000001 & disp_00_07  
{
    *:2 (gbr + (disp_00_07 << 1)) = r0;
}

:mov.l  "R0",@(disp_00_07,"GBR")  is opcode_08_15=0b11000010 & disp_00_07  
{
    *:4 (gbr + (disp_00_07 << 2)) = r0;
}

:movt   rn_08_11  is opcode_12_15=0b0000 & rn_08_11 & opcode_00_07=0b00101001 
{
    rn_08_11 = sr & 1;
}

:swap.b rm_04_07,rn_08_11  is opcode_12_15=0b0110 & rn_08_11 & rm_04_07 & opcode_00_03=0b1000 
{
    local temp0;
    local temp1;
    
    temp0 = rm_04_07 & 0xFFFF0000;
    temp1 = (rm_04_07 & 0x000000FF) << 8;
    
    rn_08_11 = (rm_04_07 & 0x0000FF00) >> 8;
    rn_08_11 = rn_08_11 | temp1 | temp0;
}

:swap.w rm_04_07,rn_08_11  is opcode_12_15=0b0110 & rn_08_11 & rm_04_07 & opcode_00_03=0b1001 
{
    local temp;
    
    temp = (rm_04_07 >> 16) & 0x0000FFFF;
    
    rn_08_11 = rm_04_07 << 15;
    rn_08_11 = rn_08_11 | temp;
}

:xtrct  rm_04_07,rn_08_11  is opcode_12_15=0b0010 & rn_08_11 & rm_04_07 & opcode_00_03=0b1101 
{
    local high;
    local low;
    
    high = (rm_04_07 << 16) & 0xFFFF0000;
    low = (rn_08_11 >> 16) & 0x0000FFFF;
    rn_08_11 = high | low;
}

#
# Arithmetic Operation Instructions
#
:add    rm_04_07,rn_08_11  is opcode_12_15=0b0011 & rn_08_11 & rm_04_07 & opcode_00_03=0b1100 
{
    rn_08_11 = rn_08_11 + rm_04_07;
}

:add    imm_00_07,rn_08_11  is opcode_12_15=0b0111 & rn_08_11 & imm_00_07  
{
    rn_08_11 = rn_08_11 + sext(imm_00_07:1);
}

:addc   rm_04_07,rn_08_11  is opcode_12_15=0b0011 & rn_08_11 & rm_04_07 & opcode_00_03=0b1110 
{
    local temp0;
    local temp1;
    
    temp1 = rn_08_11 + rm_04_07;
    temp0 = temp1 + (sr & 0x1);
    
    if(temp0 > temp1) goto <SET_T>;
    
    sr = sr & 0xFFFFFFFE;
    
    if(temp1 > rn_08_11) goto <SET_T>;
    
    goto <END>;
    
    <SET_T>
    
    sr = sr | 1;
    
    <END>
}

:addv   rm_04_07,rn_08_11  is opcode_12_15=0b0011 & rn_08_11 & rm_04_07 & opcode_00_03=0b1111 
{
    # BUGBUG: missing
}

:cmp"/eq"   imm_00_07,"R0"  is opcode_08_15=0b10001000 & imm_00_07  
{
    local temp:4 = sext(imm_00_07:1);
    
    if(r0 == temp) goto <SET_T>;
       
    sr = sr & 0xFFFFFFFE;
    goto <END>;
       
   <SET_T>
    
    sr = sr | 0x1;
       
    <END>
}

:cmp"/eq"   rm_04_07,rn_08_11  is opcode_12_15=0b0011 & rn_08_11 & rm_04_07 & opcode_00_03=0b0000 
{
    if(rn_08_11 == rm_04_07) goto <SET_T>;
       
    sr = sr & 0xFFFFFFFE;
    goto <END>;
       
   <SET_T>
    
    sr = sr | 0x1;
       
    <END>
}

:cmp"/hs"   rm_04_07,rn_08_11  is opcode_12_15=0b0011 & rn_08_11 & rm_04_07 & opcode_00_03=0b0010 
{
    if(rn_08_11 >= rm_04_07) goto <SET_T>;
       
    sr = sr & 0xFFFFFFFE;
    goto <END>;
       
   <SET_T>
    
    sr = sr | 0x1;
       
    <END>
}

:cmp"/ge"   rm_04_07,rn_08_11  is opcode_12_15=0b0011 & rn_08_11 & rm_04_07 & opcode_00_03=0b0011 
{
    local n:4 = sext(rn_08_11);
    local m:4 = sext(rm_04_07);
    
    if(n >= m) goto <SET_T>;
       
    sr = sr & 0xFFFFFFFE;
    goto <END>;
       
   <SET_T>
    
    sr = sr | 0x1;
       
    <END>
}

:cmp"/hi"   rm_04_07,rn_08_11  is opcode_12_15=0b0011 & rn_08_11 & rm_04_07 & opcode_00_03=0b0110 
{
    if(rn_08_11 > rm_04_07) goto <SET_T>;
       
    sr = sr & 0xFFFFFFFE;
    goto <END>;
       
   <SET_T>
    
    sr = sr | 0x1;
       
    <END>
}

:cmp"/gt"   rm_04_07,rn_08_11  is opcode_12_15=0b0011 & rn_08_11 & rm_04_07 & opcode_00_03=0b0111 
{
    local n:4 = sext(rn_08_11);
    local m:4 = sext(rm_04_07);
    
    if(n s> m) goto <SET_T>;
       
    sr = sr & 0xFFFFFFFE;
    goto <END>;
       
   <SET_T>
    
    sr = sr | 0x1;
       
    <END>
}

:cmp"/pl"   rn_08_11  is opcode_12_15=0b0100 & rn_08_11 & opcode_00_07=0b00010101 
{
    local n:4 = sext(rn_08_11);
    
    if(n s> 0) goto <SET_T>;
       
    sr = sr & 0xFFFFFFFE;
    goto <END>;
       
   <SET_T>
    
    sr = sr | 0x1;
       
    <END>
}

:cmp"/pz"   rn_08_11  is opcode_12_15=0b0100 & rn_08_11 & opcode_00_07=0b00010001 
{
    local n:4 = sext(rn_08_11);
    
    if(n s>= 0) goto <SET_T>;
       
    sr = sr & 0xFFFFFFFE;
    goto <END>;
       
   <SET_T>
    
    sr = sr | 0x1;
       
    <END>
}

:cmp"/str"  rm_04_07,rn_08_11  is opcode_12_15=0b0010 & rn_08_11 & rm_04_07 & opcode_00_03=0b1100 
{
    local temp:4;
    local HH:4;
    local HL:4;
    local LH:4;
    local LL:4;
    
    temp = rn_08_11 ^ rm_04_07;
    
    HH = (temp & 0xFF000000) >> 24;
    HL = (temp & 0x00FF0000) >> 16;
    LH = (temp & 0x0000FF00) >> 8;
    LL = (temp & 0x000000FF);

    local test:1 = (HH != 0) && (HL != 0) && (LH != 0) && (LL != 0);
    
    if(test == 1) goto <SET_T>;
    
    sr = sr & 0xFFFFFFFE;
    goto <END>;
    
    <SET_T>
    sr = sr | 0x1;
    <END>
}

:div0s  rm_04_07,rn_08_11  is opcode_12_15=0b0010 & rn_08_11 & rm_04_07 & opcode_00_03=0b0111 
{}

:div0u  is opcode_00_15=0b0000000000011001 
{}

:div1   rm_04_07,rn_08_11  is opcode_12_15=0b0011 & rn_08_11 & rm_04_07 & opcode_00_03=0b0100 
{}

:exts.b rm_04_07,rn_08_11  is opcode_12_15=0b0110 & rn_08_11 & rm_04_07 & opcode_00_03=0b1110 
{}

:exts.w rm_04_07,rn_08_11  is opcode_12_15=0b0110 & rn_08_11 & rm_04_07 & opcode_00_03=0b1111 
{}

:extu.b rm_04_07,rn_08_11  is opcode_12_15=0b0110 & rn_08_11 & rm_04_07 & opcode_00_03=0b1100 
{}

:extu.w rm_04_07,rn_08_11  is opcode_12_15=0b0110 & rn_08_11 & rm_04_07 & opcode_00_03=0b1101 
{}

:mac.w  @rm_04_07+,@rn_08_11+  is opcode_12_15=0b0100 & rn_08_11 & rm_04_07 & opcode_00_03=0b1111 
{}

:muls.w rm_04_07,rn_08_11  is opcode_12_15=0b0010 & rn_08_11 & rm_04_07 & opcode_00_03=0b1111 
{}

:mulu.w rm_04_07,rn_08_11  is opcode_12_15=0b0010 & rn_08_11 & rm_04_07 & opcode_00_03=0b1110 
{}

:neg    rm_04_07,rn_08_11  is opcode_12_15=0b0110 & rn_08_11 & rm_04_07 & opcode_00_03=0b1011 
{}

:negc   rm_04_07,rn_08_11  is opcode_12_15=0b0110 & rn_08_11 & rm_04_07 & opcode_00_03=0b1010 
{}

:sub    rm_04_07,rn_08_11  is opcode_12_15=0b0011 & rn_08_11 & rm_04_07 & opcode_00_03=0b1000 
{}

:subc   rm_04_07,rn_08_11  is opcode_12_15=0b0011 & rn_08_11 & rm_04_07 & opcode_00_03=0b1010 
{}

:subv   rm_04_07,rn_08_11  is opcode_12_15=0b0011 & rn_08_11 & rm_04_07 & opcode_00_03=0b1011 
{}

#
# Logic Operation Instructions
#
:and    rm_04_07,rn_08_11  is opcode_12_15=0b0010 & rn_08_11 & rm_04_07 & opcode_00_03=0b1001 
{}

:and    #imm_00_07,"R0"  is opcode_08_15=0b11001001 & imm_00_07  
{}

:and.b  #imm_00_07,@("R0","GBR")  is opcode_08_15=0b11001101 & imm_00_07  
{}

:not    rm_04_07,rn_08_11  is opcode_12_15=0b0110 & rn_08_11 & rm_04_07 & opcode_00_03=0b0111 
{}

:or rm_04_07,rn_08_11  is opcode_12_15=0b0010 & rn_08_11 & rm_04_07 & opcode_00_03=0b1011 
{}

:or #imm_00_07,"R0"  is opcode_08_15=0b11001011 & imm_00_07  
{}

:or.b   #imm_00_07,@("R0,GBR")  is opcode_08_15=0b11001111 & imm_00_07  
{}

:tas.b  @rn_08_11  is opcode_12_15=0b0100 & rn_08_11 & opcode_00_07=0b00011011 
{}

:tst    rm_04_07,rn_08_11  is opcode_12_15=0b0010 & rn_08_11 & rm_04_07 & opcode_00_03=0b1000 
{}

:tst    #imm_00_07,"R0"  is opcode_08_15=0b11001000 & imm_00_07  
{}

:tst.b  #imm_00_07,@("R0,GBR")  is opcode_08_15=0b11001100 & imm_00_07  
{}

:xor    rm_04_07,rn_08_11  is opcode_12_15=0b0010 & rn_08_11 & rm_04_07 & opcode_00_03=0b1010 
{}

:xor    #imm_00_07,"R0"  is opcode_08_15=0b11001010 & imm_00_07  
{}

:xor.b  #imm_00_07,@("R0,GBR")  is opcode_08_15=0b11001110 & imm_00_07  
{}

#
#Shift Instructions
#
:rotcl  rn_08_11  is opcode_12_15=0b0100 & rn_08_11 & opcode_00_07=0b00100100
{}

:rotcr  rn_08_11  is opcode_12_15=0b0100 & rn_08_11 & opcode_00_07=0b00100101 
{}

:rotl   rn_08_11  is opcode_12_15=0b0100 & rn_08_11 & opcode_00_07=0b00000100 
{}

:rotr   rn_08_11  is opcode_12_15=0b0100 & rn_08_11 & opcode_00_07=0b00000101 
{}

:shal   rn_08_11  is opcode_12_15=0b0100 & rn_08_11 & opcode_00_07=0b00100000 
{
    # clear or set T
    flag = 0xFFFFFFFE + ((rn_08_11 & 0x80000000) >> 31);
    sr = sr & flag;
    
    rn_08_11 = rn_08_11 << 1;
}

:shar   rn_08_11  is opcode_12_15=0b0100 & rn_08_11 & opcode_00_07=0b00100001 
{
    flag = 0xFFFFFFFE + (rn_08_11 & 1);
    sr = sr & flag;
    
    temp = rn_08_11 & 0x80000000;
    
    rn_08_11 = rn_08_11 >> 1;
    
    #if(temp != 0) rn_08_11 = rn_08_11|0x80000000;
    # BUGBUG: sign extension
}

:shll   rn_08_11  is opcode_12_15=0b0100 & rn_08_11 & opcode_00_07=0b00000000 
{
    # clear or set T
    flag = 0xFFFFFFFE + ((rn_08_11 & 0x80000000) >> 31);
    sr = sr & flag;
    
    rn_08_11 = rn_08_11 << 1;

}

:shll2  rn_08_11  is opcode_12_15=0b0100 & rn_08_11 & opcode_00_07=0b00001000 
{
    rn_08_11 = rn_08_11 << 2;
}

:shll8  rn_08_11  is opcode_12_15=0b0100 & rn_08_11 & opcode_00_07=0b00011000 
{
    rn_08_11 = rn_08_11 << 8;
}

:shll16 rn_08_11  is opcode_12_15=0b0100 & rn_08_11 & opcode_00_07=0b00101000 
{
    rn_08_11 = rn_08_11 << 16;
}

:shlr   rn_08_11  is opcode_12_15=0b0100 & rn_08_11 & opcode_00_07=0b00000001 
{
    # clear or set T
    flag = 0xFFFFFFFE + (rn_08_11 & 1);
    sr = sr & flag;
    
    rn_08_11 = rn_08_11 >> 1;
    rn_08_11 = rn_08_11 & 0x7FFFFFFF;

}

:shlr2  rn_08_11  is opcode_12_15=0b0100 & rn_08_11 & opcode_00_07=0b00001001 
{
    rn_08_11 = rn_08_11 >> 2;
    rn_08_11 = rn_08_11 & 0x3FFFFFFF;
}

:shlr8  rn_08_11  is opcode_12_15=0b0100 & rn_08_11 & opcode_00_07=0b00011001 
{
    rn_08_11 = rn_08_11 >> 8;
    rn_08_11 = rn_08_11 & 0x00FFFFFF;
}

:shlr16 rn_08_11  is opcode_12_15=0b0100 & rn_08_11 & opcode_00_07=0b00101001 
{
    rn_08_11 = rn_08_11 >> 16;
    rn_08_11 = rn_08_11 & 0x0000FFFF;
}

#
# Branch Instructions
#

:bf target00_07  is opcode_08_15=0b10001011 & target00_07
{
    t = (sr & 1);
    if (t==0) goto target00_07;
}

:bt target00_07  is opcode_08_15=0b10001001 & target00_07  
{
    t = (sr & 1);
    if (t==1) goto target00_07;
}

:bra    target00_11  is opcode_12_15=0b1010 & target00_11  
{
    delayslot(1);
    goto target00_11;
}

:bsr    target00_11  is opcode_12_15=0b1011 & target00_11  
{
    pr = inst_start + 4;
    delayslot(1);
    call target00_11;
}

:jmp    @rm_08_11  is opcode_12_15=0b0100 & rm_08_11 & opcode_00_07=0b00101011 
{
    delayslot(1);
    goto rm_08_11;
}

:jsr    @rm_08_11  is opcode_12_15=0b0100 & rm_08_11 & opcode_00_07=0b00001011 
{
    pr = inst_start + 4;
    delayslot(1);
    call rm_08_11;
}

:rts  is opcode_00_15=0b0000000000001011 
{
    delayslot(1);
    #pc = pr;
    #goto [pr];
    return [pr];
}

#
# System Control Instructions
#
:clrmac  is opcode_00_15=0b0000000000101000 
{
    mach = 0;
    macl = 0;
}

:clrt  is opcode_00_15=0b0000000000001000 
{
    sr = sr & 0xFFFFFFFE;
}

:ldc    rm_08_11",SR"  is opcode_12_15=0b0100 & rm_08_11 & opcode_00_07=0b00001110 
{
    sr = rm_08_11 & 0x0FFF0FFF;
}

:ldc.l  @rm_08_11+,"SR"  is opcode_12_15=0b0100 & rm_08_11 & opcode_00_07=0b00000111 
{
    sr = *rm_08_11 & 0x0FFF0FFF;
    rm_08_11 = rm_08_11 + 4;
    
}

:ldc    rm_08_11,"GBR"  is opcode_12_15=0b0100 & rm_08_11 & opcode_00_07=0b00011110 
{
    gbr = rm_08_11;
}

:ldc.l  @rm_08_11+,"GBR"  is opcode_12_15=0b0100 & rm_08_11 & opcode_00_07=0b00010111 
{
    gbr = *rm_08_11;
    rm_08_11 = rm_08_11 + 4;
}

:ldc    rm_08_11,"VBR"  is opcode_12_15=0b0100 & rm_08_11 & opcode_00_07=0b00101110 
{
    vbr = rm_08_11;
}

:ldc.l  @rm_08_11+,"VBR"  is opcode_12_15=0b0100 & rm_08_11 & opcode_00_07=0b00100111 
{
    vbr = *rm_08_11;
    rm_08_11 = rm_08_11 + 4;
}

:lds    rm_08_11,"MACH"  is opcode_12_15=0b0100 & rm_08_11 & opcode_00_07=0b00001010 
{
    mach = rm_08_11;
    mach = mach | 0x000003ff;
}

:lds.l  @rm_08_11+,"MACH"  is opcode_12_15=0b0100 & rm_08_11 & opcode_00_07=0b00000110 
{
    mach = *rm_08_11;
    mach = mach | 0x000003ff;
    rm_08_11 = rm_08_11 + 4;
}

:lds    rm_08_11,"MACL"  is opcode_12_15=0b0100 & rm_08_11 & opcode_00_07=0b00011010 
{
    macl = rm_08_11;
}

:lds.l  @rm_08_11+,"MACL"  is opcode_12_15=0b0100 & rm_08_11 & opcode_00_07=0b00010110 
{
    macl = *rm_08_11;
    rm_08_11 = rm_08_11 + 4;
}

:lds    rm_08_11,"PR"  is opcode_12_15=0b0100 & rm_08_11 & opcode_00_07=0b00101010 
{
    pr = rm_08_11;
}

# BUGBUG: all @ instructions need a load
:lds.l  @rm_08_11+,"PR"  is opcode_12_15=0b0100 & rm_08_11 & opcode_00_07=0b00100110 
{
    pr = *rm_08_11;
    rm_08_11 = rm_08_11 + 4;
}

:nop  is opcode_00_15=0b0000000000001001 
{
    # BUGBUG: intentional nop
}

:rte is opcode_00_15=0b0000000000101011 
{
    #local _pc;
    #local _sr;
    
    _pc:4 = *r15;
    r15 = r15 + 4;
    
    _sr:4 = *r15 & 0x000063F3;
    r15  = r15 + 4;
    
    delayslot(1);
    
    pc = _pc;
    sr = _sr;
}

:sett  is opcode_00_15=0b0000000000011000 
{
    sr = sr & 1;
}

:sleep  is opcode_00_15=0b0000000000011011 
{
}

:stc    "SR",rn_08_11  is opcode_12_15=0b0000 & rn_08_11 & opcode_00_07=0b00000010 
{
    rn_08_11 = sr;
}

:stc.l  "SR",@-rn_08_11  is opcode_12_15=0b0100 & rn_08_11 & opcode_00_07=0b00000011 
{
    rn_08_11 = rn_08_11 -4;
    *rn_08_11 = sr;
}

:stc    "GBR",rn_08_11  is opcode_12_15=0b0000 & rn_08_11 & opcode_00_07=0b00010010 
{
    rn_08_11 = gbr;
}

:stc.l  "GBR",@-rn_08_11  is opcode_12_15=0b0100 & rn_08_11 & opcode_00_07=0b00010011 
{
    rn_08_11 = rn_08_11 -4;
    *rn_08_11 = gbr;
}

:stc    "VBR",rn_08_11  is opcode_12_15=0b0000 & rn_08_11 & opcode_00_07=0b00100010 
{
    rn_08_11 = vbr;
}

:stc.l  "VBR",@-rn_08_11  is opcode_12_15=0b0100 & rn_08_11 & opcode_00_07=0b00100011
{
    rn_08_11 = rn_08_11 -4;
    *rn_08_11 = vbr;
}

:sts    "MACH",rn_08_11  is opcode_12_15=0b0000 & rn_08_11 & opcode_00_07=0b00001010 
{
    rn_08_11 = mach;
}

:sts.l  "MACH",@-rn_08_11  is opcode_12_15=0b0100 & rn_08_11 & opcode_00_07=0b00000010 
{
    rn_08_11 = rn_08_11 -4;
    *rn_08_11 = mach;
}

:sts    "MACL",rn_08_11  is opcode_12_15=0b0000 & rn_08_11 & opcode_00_07=0b00011010 
{
    rn_08_11 = macl;
}

:sts.l  "MACL",@-rn_08_11  is opcode_12_15=0b0100 & rn_08_11 & opcode_00_07=0b00010010 
{
    rn_08_11 = rn_08_11 -4;
    *rn_08_11 = macl;
}

:sts    "PR",rn_08_11  is opcode_12_15=0b0000 & rn_08_11 & opcode_00_07=0b00101010 
{
    rn_08_11 = pr;
}

:sts.l  "PR",@-rn_08_11  is opcode_12_15=0b0100 & rn_08_11 & opcode_00_07=0b00100010 
{
    rn_08_11 = rn_08_11 -4;
    *rn_08_11 = pr;
}

:trapa  #imm_00_07  is opcode_08_15=0b11000011 & imm_00_07  
{
    r15 = r15 -4;
    *r15 = sr;
    
    r15 = r15- 4;
    *r15 = pc + 2;
    
    pc = *(vbr + (imm_00_07 * 4));
}